include "channel-spec.csp"
include "channel.csp"
include "scheduler.csp"

-- Set of ProcessJ processes.
Processes = { 0, 1 }
NULL = -1

-- Set of ProcessJ channels.
Channels = { 0 }

-- Set of nullable ProcessJ processes.
Nullable_Processes = union({NULL}, Processes)

-- Data values. 0 and 1 are distinct different values.
Values = { 0, 1 }

CHANNELS = ||| c : Channels @ CHANNEL(c)

alphaCHANNELS = Union({alphaCHANNEL(c) | c <- Channels})

-- PROTECTED READING AND WRITING PROCESSES

RESTRICTED_PROCESS_WRITER(pid, chan) = 
    schedule!pid ->
    run.pid -> 
    running.pid.set!true ->
    RESTRICTED_PROCESS_WRITER'(pid, chan)

RESTRICTED_PROCESS_WRITER'(pid, chan) =
    write.chan.pid?message ->
    channel_claim.chan!pid ->
    WRITE(pid, chan, message);
    channel_release.chan.pid ->
    YIELD(pid);
    ack.chan.pid ->
    RESTRICTED_PROCESS_WRITER'(pid, chan)

RESTRICTED_PROCESS_READER(pid, chan) = 
    schedule.pid ->
    run.pid ->
    running.pid.set!true ->
    RESTRICTED_PROCESS_READER'(pid, chan)

RESTRICTED_PROCESS_READER'(pid, chan) = 
    start_read.chan.pid ->
    channel_claim.chan!pid ->                -- 'synchronized' of isReadyToRead() (claim the monitor)
    writer.chan.get?p ->
    (
        if (p == -1) then               -- writer != null                         
            reader.chan.set.pid ->         -- reader = this;            [done in isReadyToRead()]
            ready.pid.set!false ->
            channel_release.chan.pid ->           -- release the monitor
            YIELD(pid);
            SKIP
        else
            channel_release.chan.pid ->           -- release the monitor
            SKIP
    );
    channel_claim.chan!pid ->             -- 'synchronized' of read() (claim the monitor)
    READ(pid, chan);              -- c.read();
    data.chan.get?message ->      -- (4) T myData = data;    [lifted out of read()]
    let                           -- Silly trick to retain message in scope 
        m = message                 -- Necessary because of the YIELD call.
    within
        channel_release.chan.pid ->           -- release the monitor
        YIELD(pid);                   -- yield()
        read.chan.pid!m ->            -- (6) deliver the message to the environment
        RESTRICTED_PROCESS_READER'(pid, chan)    -- Recurse to start over (simulate jump to L2)

RESTRICTED_READER_WRITER(pid, pid', chan) = 
(
    (RESTRICTED_PROCESS_WRITER(pid, chan) ||| RESTRICTED_PROCESS_READER(pid', chan))
    [| alphaCHANNELS |]
    CHANNELS
) \ alphaCHANNELS

RESTRICTED_PJ_CHAN_SYSTEM(pid, pid', chan, n) = 
(
    RESTRICTED_READER_WRITER(pid, pid', chan) 
    [| alphaN_SCHEDULER_SYSTEM |]
    N_SCHEDULER_SYSTEM(n)
) \ alphaN_SCHEDULER_SYSTEM

-- Protected channels should still be deadlock free and deterministice with one scheduler.

assert RESTRICTED_PJ_CHAN_SYSTEM(0, 1, 0, 1) :[deadlock free[FD]]
assert RESTRICTED_PJ_CHAN_SYSTEM(0, 1, 0, 1) :[divergence free[FD]]
assert RESTRICTED_PJ_CHAN_SYSTEM(0, 1, 0, 1) :[deterministic[FD]]
assert RESTRICTED_PJ_CHAN_SYSTEM(0, 1, 0, 2) :[deadlock free[FD]]
assert RESTRICTED_PJ_CHAN_SYSTEM(0, 1, 0, 2) :[divergence free[FD]]
assert RESTRICTED_PJ_CHAN_SYSTEM(0, 1, 0, 2) :[deterministic[FD]]
assert RESTRICTED_PJ_CHAN_SYSTEM(0, 1, 0, 3) :[deadlock free[FD]]
assert RESTRICTED_PJ_CHAN_SYSTEM(0, 1, 0, 3) :[divergence free[FD]]
assert RESTRICTED_PJ_CHAN_SYSTEM(0, 1, 0, 3) :[deterministic[FD]]
assert RESTRICTED_PJ_CHAN_SYSTEM(0, 1, 0, 4) :[deadlock free[FD]]
assert RESTRICTED_PJ_CHAN_SYSTEM(0, 1, 0, 4) :[divergence free[FD]]
assert RESTRICTED_PJ_CHAN_SYSTEM(0, 1, 0, 4) :[deterministic[FD]]

-- Test to see still refines in trace model with protection and single scheduler.
assert GENERIC_CHANNEL(0, 1, 0) [T= RESTRICTED_PJ_CHAN_SYSTEM(0, 1, 0, 1)
assert not GENERIC_CHANNEL(0, 1, 0) [F= RESTRICTED_PJ_CHAN_SYSTEM(0, 1, 0, 1)
assert not GENERIC_CHANNEL(0, 1, 0) [FD= RESTRICTED_PJ_CHAN_SYSTEM(0, 1, 0, 1)

-- these _all_ fail.
assert not RESTRICTED_PJ_CHAN_SYSTEM(0, 1, 0, 1) [T= GENERIC_CHANNEL(0, 1, 0)
assert not RESTRICTED_PJ_CHAN_SYSTEM(0, 1, 0, 1) [F= GENERIC_CHANNEL(0, 1, 0)
assert not RESTRICTED_PJ_CHAN_SYSTEM(0, 1, 0, 1) [FD= GENERIC_CHANNEL(0, 1, 0)

-- Can now verify in failures, and both ways in FD
assert GENERIC_CHANNEL(0, 1, 0) [FD= RESTRICTED_PJ_CHAN_SYSTEM(0, 1, 0, 2)
assert RESTRICTED_PJ_CHAN_SYSTEM(0, 1, 0, 2) [FD= GENERIC_CHANNEL(0, 1, 0)

-- VERIFICATION OF THREE SCHEDULER SYSTEM
assert GENERIC_CHANNEL(0, 1, 0) [FD= RESTRICTED_PJ_CHAN_SYSTEM(0, 1, 0, 3)
assert RESTRICTED_PJ_CHAN_SYSTEM(0, 1, 0, 3) [FD= GENERIC_CHANNEL(0, 1, 0)

-- VERIFICATION OF FOUR SCHEDULER SYSTEM
assert GENERIC_CHANNEL(0, 1, 0) [FD= RESTRICTED_PJ_CHAN_SYSTEM(0, 1, 0, 4)
assert RESTRICTED_PJ_CHAN_SYSTEM(0, 1, 0, 4) [FD= GENERIC_CHANNEL(0, 1, 0)
