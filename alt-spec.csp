include "channel-spec.csp"

-- GENETIC ALT SPECIFICATION

channel select : Processes
channel return : Channels

OFFER_WRITERS(selector, <>, <>, all_chans, all_writers, flags, waiting) = STOP
OFFER_WRITERS(selector, <c>^chans, <p>^writing_procs, all_chans, all_writers, flags, waiting) =
    write.c.p?mess -> ALT_SPEC(selector, all_chans, all_writers, mapUpdate(flags, c, true), waiting)
    [] 
    OFFER_WRITERS(selector, chans, writing_procs, all_chans, all_writers, flags, waiting)

OFFER_READY(selector, <>, writing_procs, all_chans, flags, waiting) = STOP
OFFER_READY(selector, <c>^chans, writing_procs, all_chans, flags, waiting) =
    mapLookup(flags, c) & return!c ->
      ALT_SPEC(selector, all_chans, writing_procs, mapUpdate(flags, c, false), false)
    []
    OFFER_READY(selector, chans, writing_procs, all_chans, flags, waiting)


ALT_SPEC(selector, chans, writing_procs, flags, waiting) =
    OFFER_WRITERS(selector, chans, writing_procs, chans, writing_procs, flags, waiting)
    []
    if (waiting == true) then
        OFFER_READY(selector, chans, writing_procs, chans, flags, waiting)
    else
        select.selector ->
        ALT_SPEC(selector, chans, writing_procs, flags, true)

alphaALT_SPEC(altpid) = { write.c.p.v, return.c, select.altpid | c <- Channels, p <- Processes, v <- Values }

ALT_USER(pid) =
    select.pid ->           -- Kick off the alt
    return?idx ->           -- Get a returned index of a ready channel back
    start_read.idx.pid ->   -- Do the actual read from the chosen channel
    transmit.idx?mess ->
    read.idx.pid!mess ->    
    ALT_USER(pid)           -- Recurse

alphaALT_USER(pid) = 
{ 
    select.pid, 
    return.c, 
    start_read.c.pid, 
    transmit.c.v, 
    read.c.pid.v | c <- Channels, v <- Values 
}

PRIVATE_ALT_SPEC_SYSTEM(pid) = { transmit.c.v, return.c | c <- Channels, v <- Values }

create_flags(flags, <>) = flags
create_flags(flags, <c>^chans) =
    mapUpdate(create_flags(flags, chans), c, false)

LEFT_PROCS(<>, <>) = SKIP
LEFT_PROCS(<p>^writing_procs, <c>^chans) =
    LEFT(p, c) ||| LEFT_PROCS(writing_procs, chans)

alphaLEFT_PROCS(<>, <>) = {}
alphaLEFT_PROCS(<p>^writing_procs, <c>^chans) = union(
        {
            write.c.p.v, 
            transmit.c.v, 
            ack.c.p
            | v <- Values
        },
        alphaLEFT_PROCS(writing_procs, chans)
    )

ALT_SPEC_SYSTEM(selector, chans, writing_procs) =
(
    (
        LEFT_PROCS(writing_procs, chans)
        [alphaLEFT_PROCS(writing_procs, chans) || alphaALT_SPEC(selector)]
        ALT_SPEC(selector, chans, writing_procs, create_flags((| |), chans), false)
    )
    [union(alphaLEFT_PROCS(writing_procs, chans), alphaALT_SPEC(selector)) || alphaALT_USER(selector)]
    ALT_USER(selector)
) \ union(PRIVATE_ALT_SPEC_SYSTEM(selector), Union({PRIVATE_CHANNEL_SPEC(c) | c <- Channels}))

-- END GENERIC ALT MODEL