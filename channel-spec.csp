
channel read, write: Channels.Processes.Values
channel start_read, ack: Channels.Processes
channel transmit: Channels.Values

LEFT(pid, chan) = 
    write.chan.pid?mess -> 
    transmit.chan!mess -> 
    ack.chan!pid -> 
    LEFT(pid, chan)

RIGHT(pid, chan) = 
    start_read.chan.pid -> 
    transmit.chan?mess -> 
    read.chan.pid!mess -> 
    RIGHT(pid, chan)

alphaLEFT(pid, chan) =
{
    write.chan.pid.v, 
    transmit.chan.v, 
    ack.chan.pid
    | v <- Values
}

alphaRIGHT(pid, chan) =
{
    start_read.chan.pid, 
    transmit.chan.v, 
    read.chan.pid.v
    | v <- Values
}

PRIVATE_CHANNEL_SPEC(chan) =
{
    transmit.chan.v
    | v <- Values
}

GENERIC_CHANNEL(pid, pid', chan) = 
(
    LEFT(pid, chan) 
    [alphaLEFT(pid, chan) || alphaRIGHT(pid', chan)] 
    RIGHT(pid', chan)
) \ PRIVATE_CHANNEL_SPEC(chan)

alphaGENERIC_CHANNEL(pid, pid', chan) = 
{
    write.chan.pid.v, 
    ack.chan.pid, 
    start_read.chan.pid', 
    read.chan.pid'.v 
    | v <- Values
} 

N_TO_ONE_GENERIC_CHANNEL(N, chan) =
(
    (||| p : {1..N} @ LEFT(p, chan)) 
    [|{|transmit|}|]
    RIGHT(0, chan)
) \ PRIVATE_CHANNEL_SPEC(chan)

ONE_TO_N_GENERIC_CHANNEL(N, chan) =
(
    LEFT(0, chan)
    [|{|transmit|}|]
    (||| p : {1..N} @ RIGHT(p, chan))
) \ PRIVATE_CHANNEL_SPEC(chan)

N_TO_M_GENERIC_CHANNEL(N, M, chan) =
(
    (||| p : {0..N-1} @ LEFT(p, chan))
    [|{|transmit|}|]
    (||| p : {N..N+M-1} @ RIGHT(p, chan))
) \ PRIVATE_CHANNEL_SPEC(chan)

--assert N_TO_ONE_GENERIC_CHANNEL(2, 0) :[deadlock free[FD]]
--assert ONE_TO_N_GENERIC_CHANNEL(2, 0) :[deadlock free[FD]]
--assert N_TO_M_GENERIC_CHANNEL(2, 2, 0) :[deadlock free[FD]]

-- END OF MODEL SPECIFICATION