QUEUE :: (Complete a, Set a) => (a=>Event, a=>Event, <a>, Int) -> Proc
QUEUE(push, pop, q, CAP) =
(
    if (length(q) >= CAP) then STOP
    else
        push?v ->
        QUEUE(push, pop, concat(<q, <v>>), CAP)
)
[]
(
    if (length(q) == 0) then STOP
    else
        pop!head(q) ->
        QUEUE(push, pop, tail(q), CAP)
)

alphaQUEUE :: (Complete a, Set a) => (a=>Event, a=>Event, Int, {a}) -> {Event}
alphaQUEUE(push, pop, CAP, T) =
{
    push.v,
    pop.v
    | v <- T
} 